//
//  LongPressLogoEmitter.swift
//  ChatApp
//
//  Created by –¢–∏–º—É—Ä –¢–∞–π–º–∞—Å–æ–≤ on 01.12.2021.
//

import UIKit
import Rswift

/*
 üëâ –°–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≥–µ—Ä–±–æ–≤ –¢–∏–Ω—å–∫–æ—Ñ –∏–∑ –ø–æ–¥ –ø–∞–ª—å—Ü–∞ –ø—Ä–∏ –¥–ª–∏–Ω–Ω–æ–º –Ω–∞–∂–∞—Ç–∏–∏.
 ‚öôÔ∏è –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞–µ—Ç—Å—è drawingView. –≠—Ç–æ –≤—å—é—à–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ª–æ–≥–æ—Ç–∏–ø—ã.
 üîÅ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –≥–µ—Ä–±–æ–≤ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ lifetime —ç–º–∏—Ç–µ—Ä–∞.
 –°—É–¥—è –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –ø—Ä–∏ lifetime = 0 —ç–º–∏—Ç–µ—Ä –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ, —Ç.–µ. —Ä–µ—Å—É—Ä—Å—ã –Ω–µ —Ç—Ä–∞—Ç—è—Ç—Å—è.
 –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ, —á–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—è, —Ç.–∫. –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Å—Ç–∞—é—Ç—Å—è "–¥–æ–≥–æ—Å–∞—é—â–∏–µ" –ª–æ–≥–æ—Ç–∏–ø—ã.
 ‚¨ÜÔ∏è –ü—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, —á—Ç–æ–±—ã —Å–ª–æ–π —ç–º–∏—Ç–µ—Ä–∞ –±—ã–ª –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –±—ã–ª–∞ –≤–∏–¥–Ω–∞.
 */

final class LongPressLogoEmitter {
    private static let logoLifetime: Float = 1.5
    
    // MARK: - Properties
    private lazy var emitterCell: CAEmitterCell = {
        let cell = CAEmitterCell()
        cell.contents = R.image.tinkoffTinyLogo()?.cgImage
        cell.contentsScale = 3
        cell.birthRate = 18
        cell.emissionRange = .pi
        cell.lifetime = Self.logoLifetime
        cell.lifetimeRange = Self.logoLifetime / 3
        cell.alphaSpeed = -0.5
        cell.velocity = 80
        return cell
    }()
    
    private lazy var emitterLayer: CAEmitterLayer = {
        let layer = CAEmitterLayer()
        layer.emitterSize = CGSize(width: 1, height: 1)
        layer.emitterShape = .circle
        layer.emitterCells = [emitterCell]
        layer.lifetime = 0
        return layer
    }()
    
    /// –í—å—é—à–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ä–∏—Å—É—é—Ç—Å—è –ª–æ–≥–æ—Ç–∏–ø—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞–∂–∞—Ç–∏—è
    private weak var drawingView: UIView?
    
    /// Gesture Recognizer, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —ç–º–∏—Ç–µ—Ä
    private lazy var longPressGestureRecognizer: UILongPressGestureRecognizer = {
        return UILongPressGestureRecognizer(
            target: self,
            action: #selector(handleLongPress)
        )
    }()
    
    /// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —ç–º–∏—Ç–µ—Ä–∞
    private(set) var isEnabled: Bool = false
    
    // MARK: - Initializer
    init(drawingView: UIView) {
        self.drawingView = drawingView
        self.emitterLayer.lifetime = 0
        self.drawingView?.addGestureRecognizer(longPressGestureRecognizer)
    }
    
    // MARK: - TurnOn/TurnOff
    func enable() {
        guard !isEnabled else {
            print("Logo emitter already enabled")
            return
        }
        self.longPressGestureRecognizer.isEnabled = true
        self.drawingView?.layer.addSublayer(emitterLayer)
        self.isEnabled = true
    }
    
    func disable() {
        guard isEnabled else {
            print("Logo emitter already disabled")
            return
        }
        self.longPressGestureRecognizer.isEnabled = false
        emitterLayer.removeFromSuperlayer()
        self.isEnabled = false
    }
    
    // MARK: - GestureHandler
    @objc
    private func handleLongPress(_ sender: UIGestureRecognizer) {
        switch sender.state {
        case .began:
            makeSureEmitterLayerIsOnTop()
            emitterLayer.lifetime = Self.logoLifetime
            emitterLayer.emitterPosition = sender.location(in: drawingView)
        case .changed:
            emitterLayer.emitterPosition = sender.location(in: drawingView)
        default:
            emitterLayer.lifetime = 0
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ–±—ã —Å–ª–æ–π —ç–º–∏—Ç–µ—Ä–∞ –±—ã–ª "–≤–∏–¥–∏–º—ã–º". –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫ - –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–≥–æ
    private func makeSureEmitterLayerIsOnTop() {
        if drawingView?.layer.sublayers?.last != emitterLayer {
            self.drawingView?.layer.bringSublayerToFront(emitterLayer)
        }
    }
}

private extension CALayer {
    
    /// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ª–æ–π –ø–æ–≤–µ—Ä—Ö –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å–ª–æ–µ–≤ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ—è
    func bringSublayerToFront(_ sublayer: CALayer) {
        sublayer.removeFromSuperlayer()
        self.addSublayer(sublayer)
    }
}

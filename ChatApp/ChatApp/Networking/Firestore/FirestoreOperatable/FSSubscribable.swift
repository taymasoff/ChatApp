//
//  FSSubscribable.swift
//  ChatApp
//
//  Created by –¢–∏–º—É—Ä –¢–∞–π–º–∞—Å–æ–≤ on 31.10.2021.
//

import Foundation
import FirebaseFirestore

typealias FSUpdatesListener = (_ updateLog: String?, _ error: Error?) -> Void

/// –¢–∏–ø, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–±–æ—Ç—ã Firestore —Å –º–µ—Ç–æ–¥–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
protocol FSSubscribable: FSOperatableBase {
    
    /// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    var listener: ListenerRegistration? { get set }
    
    /// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è reference –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç model –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    /// - Parameters:
    /// - listener: –∑–∞–º—ã–∫–∞–Ω–∏–µ, –ø—Ä–∏–Ω–∏–º–∞—é—â–µ–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π updateLog –∏–ª–∏ –æ—à–∏–±–∫—É error
    /// - updateLog: –æ—Ü–ø–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤ —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    /// - error: –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π Error
    func subscribeToUpdates(listener: @escaping FSUpdatesListener)
    
    /// –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π reference
    func unsubscribeFromUpdates()
}

// MARK: - FSSubscribable Default Implementation
extension FSSubscribable where ModelType: Decodable {
    
    // MARK: SubscribeToUpdates Default Implementation
    func subscribeToUpdates(listener: @escaping FSUpdatesListener) {
        self.listener = reference.addSnapshotListener { [weak self] snapshot, error in
            guard error == nil else {
                listener(nil, error)
                return
            }
            
            self?.model.value = snapshot?.documents
                .compactMap { (document) -> ModelType? in
                    if let resultModel = try? document.data(as: ModelType.self) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å Identifiable - —Ç–æ –∑–∞–¥–∞–µ–º –µ–π documentID
                        if var identifiableModel = resultModel as? FSIdentifiable {
                            identifiableModel.identifier = document.documentID
                            return identifiableModel as? ModelType
                        }
                        return resultModel
                    } else {
                        return nil
                    }
                } ?? [ModelType]()
            
            listener(
                self?.composeUpdateLog(snapshot: snapshot),
                nil
            )
        }
    }
    
    // MARK: UnsubscribeFromUpdates Default Implementation
    func unsubscribeFromUpdates() {
        _ = listener?.remove()
    }
    
    // MARK: Compose an Update Log
    private func composeUpdateLog(snapshot: QuerySnapshot?) -> String? {
        // –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        return snapshot?.documentChanges.reduce(into: [String: Int](), { dict, change in
            if change.type == .added {
                dict["added", default: 0] += 1
            }
            if change.type == .modified {
                dict["modified", default: 0] += 1
            }
            if change.type == .removed {
                dict["removed", default: 0] += 1
            }
        }).compactMap {
            return "üî• [FSUpdates] Documents \($0.key): \($0.value)"
        }.joined(separator: "\n")
    }
}

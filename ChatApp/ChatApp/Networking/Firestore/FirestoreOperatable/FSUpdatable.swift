//
//  FSUpdatable.swift
//  ChatApp
//
//  Created by –¢–∏–º—É—Ä –¢–∞–π–º–∞—Å–æ–≤ on 31.10.2021.
//

import Foundation
import FirebaseFirestore

/// –¢–∏–ø, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–±–æ—Ç—ã Firestore —Å –º–µ—Ç–æ–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
protocol FSUpdatable: FSOperatableBase {
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –æ–¥–∏–Ω —Ä–∞–∑
    /// - Parameter completion: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–∞
    func updateModel(completion: @escaping ResultHandler<String>)
}

// MARK: - FSUpdatable Default Implementation
extension FSUpdatable where ModelType: Decodable {
    
    // MARK: Update
    func updateModel(completion: @escaping ResultHandler<String>) {
        reference.getDocuments { [weak self] snapshot, error in
            if let error = error {
                completion(.failure(error))
                return
            }
            
            self?.model.value = snapshot?.documents
                .compactMap { (document) -> ModelType? in
                    if let resultModel = try? document.data(as: ModelType.self) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å Identifiable - —Ç–æ –∑–∞–¥–∞–µ–º –µ–π documentID
                        if var identifiableModel = resultModel as? FSIdentifiable {
                            identifiableModel.identifier = document.documentID
                            return identifiableModel as? ModelType
                        }
                        return resultModel
                    } else {
                        return nil
                    }
                } ?? [ModelType]()
            
            if let modelsUpdated = self?.model.value.count {
                completion(
                    .success("üî• [FSUpdates] \(modelsUpdated) documents updated")
                )
            } else {
                completion(
                    .failure(FirestoreError.updatingError)
                )
            }
        }
    }
}
